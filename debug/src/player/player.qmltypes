import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "fireworks.hpp"
        name: "Fireworks"
        accessSemantics: "reference"
        defaultProperty: "data"
        parentProperty: "parent"
        prototype: "QQuickItem"
        exports: ["player/Fireworks 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "keepFrameRate"
            type: "bool"
            read: "isKeepFrameRate"
            write: "setKeepFrameRate"
            notify: "keepFrameRateChanged"
            index: 0
        }
        Property {
            name: "frameHeight"
            type: "int"
            read: "getHeight"
            notify: "frameSizeChanged"
            index: 1
            isReadonly: true
        }
        Property {
            name: "frameWidth"
            type: "int"
            read: "getWidth"
            notify: "frameSizeChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "frameRate"
            type: "double"
            read: "getFrameRate"
            notify: "frameSizeChanged"
            index: 3
            isReadonly: true
        }
        Property {
            name: "brightness"
            type: "GLfloat"
            read: "getBrightness"
            write: "setBrightness"
            notify: "brightnessChanged"
            index: 4
        }
        Property {
            name: "contrast"
            type: "GLfloat"
            read: "getContrast"
            write: "setContrast"
            notify: "contrastChanged"
            index: 5
        }
        Property {
            name: "saturation"
            type: "GLfloat"
            read: "getSaturation"
            write: "setSaturation"
            notify: "saturationChanged"
            index: 6
        }
        Property {
            name: "filterPrefix"
            type: "QString"
            read: "getFilterPrefix"
            index: 7
            isReadonly: true
        }
        Property {
            name: "filterJsons"
            type: "QStringList"
            read: "getFilterJsons"
            index: 8
            isReadonly: true
        }
        Signal { name: "brightnessChanged" }
        Signal { name: "contrastChanged" }
        Signal { name: "saturationChanged" }
        Signal { name: "frameSizeChanged" }
        Signal { name: "keepFrameRateChanged" }
        Method {
            name: "setVideoFrame"
            Parameter { name: "pic"; type: "VideoFrameRef" }
        }
        Method {
            name: "setLUTFilter"
            Parameter { name: "path"; type: "QString" }
        }
    }
    Component {
        file: "hurricane.hpp"
        name: "Hurricane"
        accessSemantics: "reference"
        prototype: "Fireworks"
        exports: ["player/Hurricane 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "HurricaneState"
            values: [
                "CLOSING",
                "LOADING",
                "INVALID",
                "PRE_PLAY",
                "PLAYING",
                "PRE_PAUSE",
                "PAUSED"
            ]
        }
        Property {
            name: "pitch"
            type: "double"
            read: "getPitch"
            write: "setPitch"
            notify: "pitchChanged"
            index: 0
        }
        Property {
            name: "state"
            type: "HurricaneState"
            read: "getState"
            notify: "stateChanged"
            index: 1
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "audioDeviceList"
            type: "QStringList"
            read: "getAudioDeviceList"
            notify: "audioOutputDeviceChanged"
            index: 2
            isReadonly: true
        }
        Property {
            name: "tracks"
            type: "QStringList"
            read: "getTracks"
            notify: "openFileResult"
            index: 3
            isReadonly: true
        }
        Property {
            name: "backwardStatus"
            type: "bool"
            read: "isBackward"
            notify: "backwardStatusChanged"
            index: 4
            isReadonly: true
        }
        Property {
            name: "track"
            type: "int"
            read: "getTrack"
            write: "setTrack"
            notify: "trackChanged"
            index: 5
        }
        Property {
            name: "currentOutputDevice"
            type: "QString"
            read: "getCurrentOutputDevice"
            write: "setCurrentOutputDevice"
            notify: "currentOutputDeviceChanged"
            index: 6
        }
        Property {
            name: "speed"
            type: "double"
            read: "getSpeed"
            write: "setSpeed"
            notify: "speedChanged"
            index: 7
        }
        Signal { name: "stateChanged" }
        Signal {
            name: "openFileResult"
            Parameter { name: "result"; type: "PonyPlayer::OpenFileResultType" }
        }
        Signal { name: "positionChangedBySeek" }
        Signal { name: "audioOutputDeviceChanged" }
        Signal { name: "backwardStatusChanged" }
        Signal { name: "trackChanged" }
        Signal { name: "currentOutputDeviceChanged" }
        Signal { name: "pitchChanged" }
        Signal { name: "speedChanged" }
        Signal { name: "resourcesEnd" }
        Signal { name: "signalPlayerInitializing" }
        Signal { name: "signalStart" }
        Signal { name: "signalPause" }
        Signal { name: "signalClose" }
        Signal {
            name: "signalOpenFile"
            Parameter { name: "path"; type: "QString" }
        }
        Signal {
            name: "signalSeek"
            Parameter { name: "pos"; type: "double" }
        }
        Method {
            name: "openFile"
            Parameter { name: "url"; type: "QString" }
            Parameter { name: "autoClose"; type: "bool" }
        }
        Method {
            name: "openFile"
            Parameter { name: "url"; type: "QString" }
        }
        Method { name: "start" }
        Method { name: "pause" }
        Method { name: "close" }
        Method {
            name: "setVolume"
            Parameter { name: "volume"; type: "double" }
        }
        Method {
            name: "setPitch"
            Parameter { name: "pitch"; type: "double" }
        }
        Method {
            name: "setSpeed"
            Parameter { name: "speed"; type: "double" }
        }
        Method {
            name: "setCurrentOutputDevice"
            Parameter { name: "deviceName"; type: "QString" }
        }
        Method { name: "getCurrentOutputDevice"; type: "QString" }
        Method { name: "getAudioDuration"; type: "double" }
        Method { name: "getVideoDuration"; type: "double" }
        Method { name: "getPTS"; type: "double" }
        Method {
            name: "seek"
            Parameter { name: "pos"; type: "double" }
        }
        Method { name: "getTracks"; type: "QStringList" }
        Method {
            name: "setTrack"
            Parameter { name: "i"; type: "int" }
        }
        Method { name: "forward" }
        Method { name: "backward" }
        Method { name: "toggleBackward" }
        Method { name: "hasVideo"; type: "bool" }
        Method { name: "getPitch"; type: "double" }
        Method { name: "slotPositionChangedBySeek" }
        Method {
            name: "slotPlaybackStateChanged"
            Parameter { name: "isPlaying"; type: "bool" }
        }
        Method {
            name: "slotOpenFileResult"
            Parameter { name: "result"; type: "PonyPlayer::OpenFileResultType" }
        }
    }
    Component {
        file: "thumbnail.hpp"
        name: "Thumbnail"
        accessSemantics: "reference"
        prototype: "Fireworks"
        exports: ["player/Thumbnail 1.0"]
        exportMetaObjectRevisions: [256]
        Property { name: "player"; type: "QString"; read: "getPlayer"; write: "setPlayer"; index: 0 }
        Signal {
            name: "previewResponse"
            Parameter { name: "pos"; type: "double" }
        }
        Signal {
            name: "signalPreviewRequest"
            Parameter { name: "pos"; type: "double" }
        }
        Method {
            name: "previewRequest"
            Parameter { name: "pos"; type: "double" }
        }
        Method {
            name: "slotPreviewResponse"
            Parameter { name: "pos"; type: "double" }
            Parameter { name: "frame"; type: "VideoFrameRef" }
        }
    }
}
